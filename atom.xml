<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>yp_ren Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-08-03T10:10:57.651Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>renyapeng</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java 基础知识点</title>
    <link href="http://yoursite.com/wiki/Java-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    <id>http://yoursite.com/wiki/Java-基础知识点/</id>
    <published>2019-08-03T10:01:30.000Z</published>
    <updated>2019-08-03T10:10:57.651Z</updated>
    
    <content type="html"><![CDATA[<h4 id="List-和-Set-的区别"><a href="#List-和-Set-的区别" class="headerlink" title="List 和 Set 的区别"></a><a href="https://www.cnblogs.com/IvesHe/p/6108933.html" target="_blank" rel="noopener">List 和 Set 的区别</a></h4><h4 id="HashSet-是如何保证不重复的"><a href="#HashSet-是如何保证不重复的" class="headerlink" title="HashSet 是如何保证不重复的"></a><a href="https://blog.csdn.net/u010698072/article/details/52802179" target="_blank" rel="noopener">HashSet 是如何保证不重复的</a></h4><h4 id="HashMap-是线程安全的吗，为什么不是线程安全的（最好画图说明多线程环境下不安全）"><a href="#HashMap-是线程安全的吗，为什么不是线程安全的（最好画图说明多线程环境下不安全）" class="headerlink" title="HashMap 是线程安全的吗，为什么不是线程安全的（最好画图说明多线程环境下不安全）"></a>HashMap 是线程安全的吗，为什么不是线程安全的（最好画图说明多线程环境下不安全）</h4><h4 id="HashMap-的扩容过程"><a href="#HashMap-的扩容过程" class="headerlink" title="HashMap 的扩容过程"></a><a href="https://www.cnblogs.com/KingIceMou/p/6976574.html" target="_blank" rel="noopener">HashMap 的扩容过程</a></h4><h4 id="HashMap-1-7-与-1-8-的-区别，说明-1-8-做了哪些优化，如何优化的？"><a href="#HashMap-1-7-与-1-8-的-区别，说明-1-8-做了哪些优化，如何优化的？" class="headerlink" title="HashMap 1.7 与 1.8 的 区别，说明 1.8 做了哪些优化，如何优化的？"></a><a href="https://blog.csdn.net/qq_36520235/article/details/82417949" target="_blank" rel="noopener">HashMap 1.7 与 1.8 的 区别，说明 1.8 做了哪些优化，如何优化的？</a></h4><h4 id="final-finally-finalize"><a href="#final-finally-finalize" class="headerlink" title="final finally finalize"></a><a href="https://www.cnblogs.com/smart-hwt/p/8257330.html" target="_blank" rel="noopener">final finally finalize</a></h4><h4 id="强引用-、软引用、-弱引用、虚引用"><a href="#强引用-、软引用、-弱引用、虚引用" class="headerlink" title="强引用 、软引用、 弱引用、虚引用"></a><a href="https://www.cnblogs.com/yw-ah/p/5830458.html" target="_blank" rel="noopener">强引用 、软引用、 弱引用、虚引用</a></h4><h4 id="Java反射"><a href="#Java反射" class="headerlink" title="Java反射"></a>Java反射</h4><h4 id="Arrays-sort-实现原理和-Collection-实现原理"><a href="#Arrays-sort-实现原理和-Collection-实现原理" class="headerlink" title="Arrays.sort 实现原理和 Collection 实现原理"></a><a href="https://www.baidu.com/link?url=tFFtzrDujnsZH0r1y1MZalWy6NmEAsBEz6vglax_eysgtZFiTwK9ObeHWDTChqttMgr4EGAdu37jSmtyJfTx4Zts21A8ThRRzS9IWGPl5MS&wd=&eqid=9d74567f00035750000000025c417222" target="_blank" rel="noopener">Arrays.sort 实现原理和 Collection 实现原理</a></h4><h4 id="LinkedHashMap的应用"><a href="#LinkedHashMap的应用" class="headerlink" title="LinkedHashMap的应用"></a><a href="https://www.cnblogs.com/xiaoxi/p/6170590.html" target="_blank" rel="noopener">LinkedHashMap的应用</a></h4><h4 id="cloneable接口实现原理"><a href="#cloneable接口实现原理" class="headerlink" title="cloneable接口实现原理"></a>cloneable接口实现原理</h4><h4 id="异常分类以及处理机制"><a href="#异常分类以及处理机制" class="headerlink" title="异常分类以及处理机制"></a><a href="https://blog.csdn.net/hguisu/article/details/6155636#t0" target="_blank" rel="noopener">异常分类以及处理机制</a></h4><h4 id="wait和sleep的区别"><a href="#wait和sleep的区别" class="headerlink" title="wait和sleep的区别"></a><a href="https://www.cnblogs.com/hongten/p/hongten_java_sleep_wait.html" target="_blank" rel="noopener">wait和sleep的区别</a></h4><h4 id="数组在内存中如何分配"><a href="#数组在内存中如何分配" class="headerlink" title="数组在内存中如何分配"></a><a href="https://www.cnblogs.com/chenpi/p/5489732.html" target="_blank" rel="noopener">数组在内存中如何分配</a></h4>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;List-和-Set-的区别&quot;&gt;&lt;a href=&quot;#List-和-Set-的区别&quot; class=&quot;headerlink&quot; title=&quot;List 和 Set 的区别&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://www.cnblogs.com/IvesHe/p/61
      
    
    </summary>
    
      <category term="技术开发" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/"/>
    
      <category term="java基础" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/java%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Mysql 知识点</title>
    <link href="http://yoursite.com/wiki/Mysql-%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    <id>http://yoursite.com/wiki/Mysql-知识点/</id>
    <published>2019-08-03T09:36:37.000Z</published>
    <updated>2019-08-03T10:07:10.952Z</updated>
    
    <content type="html"><![CDATA[<h3 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h3><h4 id="mysql-索引类型"><a href="#mysql-索引类型" class="headerlink" title="mysql 索引类型"></a><a href="https://www.cnblogs.com/luyucheng/p/6289714.html" target="_blank" rel="noopener">mysql 索引类型</a></h4><h4 id="sql-优化的几种方式"><a href="#sql-优化的几种方式" class="headerlink" title="sql 优化的几种方式"></a><a href="https://blog.csdn.net/jie_liang/article/details/77340905" target="_blank" rel="noopener">sql 优化的几种方式</a></h4><h3 id="数据库事务"><a href="#数据库事务" class="headerlink" title="数据库事务"></a>数据库事务</h3><h4 id="数据库事务的-4-种隔离级别"><a href="#数据库事务的-4-种隔离级别" class="headerlink" title="数据库事务的 4 种隔离级别"></a><a href="https://blog.csdn.net/qq_33290787/article/details/51924963" target="_blank" rel="noopener">数据库事务的 4 种隔离级别</a></h4><h4 id="数据库事务的-4-个基本特性"><a href="#数据库事务的-4-个基本特性" class="headerlink" title="数据库事务的 4 个基本特性"></a><a href="https://blog.csdn.net/mfl0315/article/details/51981792" target="_blank" rel="noopener">数据库事务的 4 个基本特性</a></h4><h3 id="SQL"><a href="#SQL" class="headerlink" title="SQL"></a>SQL</h3><h4 id="Mysql中FIND-IN-SET-和IN区别简析"><a href="#Mysql中FIND-IN-SET-和IN区别简析" class="headerlink" title="Mysql中FIND_IN_SET()和IN区别简析"></a><a href="https://www.jb51.net/article/125744.htm" target="_blank" rel="noopener">Mysql中FIND_IN_SET()和IN区别简析</a></h4><h4 id="MySQL-Explain详解"><a href="#MySQL-Explain详解" class="headerlink" title="MySQL Explain详解"></a><a href="https://www.cnblogs.com/xuanzhi201111/p/4175635.html" target="_blank" rel="noopener">MySQL Explain详解</a></h4><h4 id="MySQL中concat以及group-concat的使用"><a href="#MySQL中concat以及group-concat的使用" class="headerlink" title="MySQL中concat以及group_concat的使用"></a><a href="https://blog.csdn.net/mary19920410/article/details/76545053" target="_blank" rel="noopener">MySQL中concat以及group_concat的使用</a></h4><h4 id="MySQL中order-by语句对null字段的排序"><a href="#MySQL中order-by语句对null字段的排序" class="headerlink" title="MySQL中order by语句对null字段的排序"></a><a href="https://www.cnblogs.com/Wcy100/p/5376399.html" target="_blank" rel="noopener">MySQL中order by语句对null字段的排序</a></h4><h3 id="SQL练习"><a href="#SQL练习" class="headerlink" title="SQL练习"></a>SQL练习</h3><h4 id="MySQL经典练习题及答案，常用SQL语句练习50题"><a href="#MySQL经典练习题及答案，常用SQL语句练习50题" class="headerlink" title="MySQL经典练习题及答案，常用SQL语句练习50题"></a><a href="https://blog.csdn.net/qq_41936662/article/details/80393172" target="_blank" rel="noopener">MySQL经典练习题及答案，常用SQL语句练习50题</a></h4>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;数据库&quot;&gt;&lt;a href=&quot;#数据库&quot; class=&quot;headerlink&quot; title=&quot;数据库&quot;&gt;&lt;/a&gt;数据库&lt;/h3&gt;&lt;h4 id=&quot;mysql-索引类型&quot;&gt;&lt;a href=&quot;#mysql-索引类型&quot; class=&quot;headerlink&quot; title=&quot;m
      
    
    </summary>
    
      <category term="技术开发" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/"/>
    
      <category term="数据库" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="mysql" scheme="http://yoursite.com/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>intellij idea 修改记录</title>
    <link href="http://yoursite.com/wiki/intellij-idea-%E4%BF%AE%E6%94%B9%E8%AE%B0%E5%BD%95/"/>
    <id>http://yoursite.com/wiki/intellij-idea-修改记录/</id>
    <published>2019-08-02T10:13:00.000Z</published>
    <updated>2019-08-03T09:25:52.312Z</updated>
    
    <content type="html"><![CDATA[<h3 id="过滤文件"><a href="#过滤文件" class="headerlink" title="过滤文件"></a>过滤文件</h3><p><img src="http://ww1.sinaimg.cn/large/006tNc79ly1g5li1vj2waj31ak0u0199.jpg" alt="image-20190802181535850"></p><h3 id="显示多-Tabs"><a href="#显示多-Tabs" class="headerlink" title="显示多 Tabs"></a>显示多 Tabs</h3><p><img src="http://ww3.sinaimg.cn/large/006tNc79ly1g5mm7u2b81j31au0u07ii.jpg" alt="image-20190803172518386"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;过滤文件&quot;&gt;&lt;a href=&quot;#过滤文件&quot; class=&quot;headerlink&quot; title=&quot;过滤文件&quot;&gt;&lt;/a&gt;过滤文件&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://ww1.sinaimg.cn/large/006tNc79ly1g5li1vj2waj31
      
    
    </summary>
    
      <category term="开发工具" scheme="http://yoursite.com/categories/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
      <category term="IDE" scheme="http://yoursite.com/categories/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/IDE/"/>
    
    
      <category term="util" scheme="http://yoursite.com/tags/util/"/>
    
  </entry>
  
  <entry>
    <title>mac brew 服务</title>
    <link href="http://yoursite.com/wiki/mac-brew-%E6%9C%8D%E5%8A%A1/"/>
    <id>http://yoursite.com/wiki/mac-brew-服务/</id>
    <published>2019-08-02T09:40:48.000Z</published>
    <updated>2019-08-02T10:01:21.944Z</updated>
    
    <content type="html"><![CDATA[<h3 id="brew-常用命令"><a href="#brew-常用命令" class="headerlink" title="brew 常用命令"></a>brew 常用命令</h3><figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">brew </span>搜索软件</span><br><span class="line"><span class="keyword">brew </span>search nginx</span><br><span class="line"></span><br><span class="line"><span class="keyword">brew </span>安装软件</span><br><span class="line"><span class="keyword">brew </span>install nginx</span><br><span class="line"></span><br><span class="line"><span class="keyword">brew </span>卸载软件</span><br><span class="line"><span class="keyword">brew </span>uninstall nginx</span><br><span class="line"></span><br><span class="line"><span class="keyword">brew </span>升级</span><br><span class="line"><span class="symbol">sudo</span> <span class="keyword">brew </span>update</span><br><span class="line"></span><br><span class="line">查看安装信息</span><br><span class="line"><span class="symbol">sudo</span> <span class="keyword">brew </span><span class="meta">info</span> nginx </span><br><span class="line"></span><br><span class="line">查看已安装软件</span><br><span class="line"><span class="keyword">brew </span>list</span><br></pre></td></tr></table></figure><h3 id="brew-安装nginx"><a href="#brew-安装nginx" class="headerlink" title="brew 安装nginx"></a>brew 安装nginx</h3><figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line">安装</span><br><span class="line"><span class="symbol">sudo</span> <span class="keyword">brew </span>install nginx</span><br><span class="line"></span><br><span class="line">启动</span><br><span class="line"><span class="symbol">sudo</span> <span class="keyword">brew </span>services start nginx</span><br><span class="line"></span><br><span class="line">重启</span><br><span class="line"><span class="symbol">sudo</span> <span class="keyword">brew </span>services restart nginx</span><br><span class="line"></span><br><span class="line">停止</span><br><span class="line"><span class="symbol">sudo</span> <span class="keyword">brew </span>services stop nginx</span><br><span class="line"></span><br><span class="line">查看</span><br><span class="line"><span class="symbol">cat</span> /usr/local/etc/nginx/nignx.conf</span><br></pre></td></tr></table></figure><h3 id="brew-redis"><a href="#brew-redis" class="headerlink" title="brew redis"></a>brew redis</h3><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">启动</span><br><span class="line">redis-server /usr/local/etc/redis-<span class="number">6379</span>.conf</span><br><span class="line"></span><br><span class="line">停止</span><br><span class="line">redis-cli -<span class="selector-tag">p</span> <span class="number">6379</span> shutdown</span><br></pre></td></tr></table></figure><h3 id="brew-安装-activemq"><a href="#brew-安装-activemq" class="headerlink" title="brew 安装 activemq"></a>brew 安装 activemq</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">安装</span><br><span class="line">brew <span class="keyword">install</span> activemq</span><br><span class="line"></span><br><span class="line">查看版本</span><br><span class="line">activemq —<span class="keyword">version</span></span><br><span class="line"></span><br><span class="line">启动</span><br><span class="line">activemq <span class="keyword">start</span></span><br><span class="line"></span><br><span class="line">地址</span><br><span class="line"><span class="keyword">http</span>://localhost:<span class="number">8161</span>    <span class="keyword">admin</span>   <span class="keyword">admin</span></span><br></pre></td></tr></table></figure><h3 id="brew-安装-rabbitmq"><a href="#brew-安装-rabbitmq" class="headerlink" title="brew 安装 rabbitmq"></a>brew 安装 rabbitmq</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">安装</span><br><span class="line">brew <span class="keyword">install</span> rabbitmq</span><br><span class="line"></span><br><span class="line">启动</span><br><span class="line">brew services <span class="keyword">start</span> rabbitmq</span><br><span class="line"></span><br><span class="line">地址</span><br><span class="line"><span class="keyword">http</span>://localhost:<span class="number">15672</span>    guest    guest</span><br></pre></td></tr></table></figure><h3 id="brew-安装-mongodb"><a href="#brew-安装-mongodb" class="headerlink" title="brew 安装 mongodb"></a>brew 安装 mongodb</h3><p>参考：<a href="https://blog.csdn.net/ligh_sqh/article/details/81112428" target="_blank" rel="noopener">https://blog.csdn.net/ligh_sqh/article/details/81112428</a></p><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">mongo</span><br><span class="line"></span><br><span class="line">启动 mongodb 客户端</span><br><span class="line">cd <span class="regexp">~/software/</span>adminmongo</span><br><span class="line">npm start</span><br><span class="line"></span><br><span class="line">客户端地址    <span class="string">http:</span><span class="comment">//localhost:1234</span></span><br></pre></td></tr></table></figure><h3 id="nacos-启动命令"><a href="#nacos-启动命令" class="headerlink" title="nacos 启动命令"></a>nacos 启动命令</h3><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">sh ～<span class="regexp">/software/</span>nacos<span class="regexp">/bin/</span>startup.sh -m standalone</span><br></pre></td></tr></table></figure><h3 id="elasticsearch-head-安装和启动-elasticsearch-GUI客户端"><a href="#elasticsearch-head-安装和启动-elasticsearch-GUI客户端" class="headerlink" title="elasticsearch-head 安装和启动 -elasticsearch GUI客户端"></a>elasticsearch-head 安装和启动 -elasticsearch GUI客户端</h3><figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line">git <span class="keyword">clone</span> <span class="title">git</span>://github.com/mobz/elasticsearch-head.git</span><br><span class="line">cd elasticsearch-head</span><br><span class="line">npm install</span><br><span class="line">npm run <span class="literal">start</span></span><br><span class="line"></span><br><span class="line">http://localhost:<span class="number">9100</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;brew-常用命令&quot;&gt;&lt;a href=&quot;#brew-常用命令&quot; class=&quot;headerlink&quot; title=&quot;brew 常用命令&quot;&gt;&lt;/a&gt;brew 常用命令&lt;/h3&gt;&lt;figure class=&quot;highlight armasm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;
      
    
    </summary>
    
      <category term="系统方面" scheme="http://yoursite.com/categories/%E7%B3%BB%E7%BB%9F%E6%96%B9%E9%9D%A2/"/>
    
      <category term="mac" scheme="http://yoursite.com/categories/%E7%B3%BB%E7%BB%9F%E6%96%B9%E9%9D%A2/mac/"/>
    
    
      <category term="mac" scheme="http://yoursite.com/tags/mac/"/>
    
  </entry>
  
  <entry>
    <title>token 防表单重复提交</title>
    <link href="http://yoursite.com/wiki/token-%E9%98%B2%E8%A1%A8%E5%8D%95%E9%87%8D%E5%A4%8D%E6%8F%90%E4%BA%A4/"/>
    <id>http://yoursite.com/wiki/token-防表单重复提交/</id>
    <published>2019-08-02T03:16:10.000Z</published>
    <updated>2019-08-03T10:13:28.246Z</updated>
    
    <content type="html"><![CDATA[<h3 id="加载页面时候调用-initToken-方法，生成-token-存入页面隐藏域中"><a href="#加载页面时候调用-initToken-方法，生成-token-存入页面隐藏域中" class="headerlink" title="加载页面时候调用 initToken() 方法，生成 token 存入页面隐藏域中"></a>加载页面时候调用 <code>initToken()</code> 方法，生成 token 存入页面隐藏域中</h3><figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">&lt;%<span class="comment">--隐藏域-防止表单的重复提交--%&gt;</span></span><br><span class="line">&lt;<span class="built_in">input</span> <span class="built_in">type</span>=<span class="string">"hidden"</span> name=<span class="string">"examToken"</span> id=<span class="string">"examToken"</span>&gt;&lt;/<span class="built_in">input</span>&gt;</span><br></pre></td></tr></table></figure><h3 id="表单提交的时候带上-token"><a href="#表单提交的时候带上-token" class="headerlink" title="表单提交的时候带上 token"></a>表单提交的时候带上 token</h3><h3 id="springMVC-方法上添加注解-TokenCheck-isCheckToken-true"><a href="#springMVC-方法上添加注解-TokenCheck-isCheckToken-true" class="headerlink" title="springMVC 方法上添加注解 @TokenCheck(isCheckToken = true)"></a>springMVC 方法上添加注解 <code>@TokenCheck(isCheckToken = true)</code></h3><h3 id="自定义注解-TokenCheck-java"><a href="#自定义注解-TokenCheck-java" class="headerlink" title="自定义注解 TokenCheck.java"></a>自定义注解 <code>TokenCheck.java</code></h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 注解会在class字节码文件中存在，在运行时可以通过反射获取到</span></span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME) </span><br><span class="line"><span class="comment">// 定义注解的作用目标**作用范围字段、枚举的常量/方法</span></span><br><span class="line"><span class="meta">@Target</span>(&#123;ElementType.METHOD&#125;)</span><br><span class="line"><span class="comment">// 说明该注解将被包含在javadoc中</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> TokenCheck &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是否需要校验</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isCheckToken</span><span class="params">()</span> <span class="keyword">default</span> <span class="keyword">false</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="springMVC-配置文件-spring-servlet-xml-添加-lt-mvc-interceptors-拦截器"><a href="#springMVC-配置文件-spring-servlet-xml-添加-lt-mvc-interceptors-拦截器" class="headerlink" title="springMVC 配置文件 spring-servlet.xml 添加 &lt;mvc:interceptors 拦截器"></a>springMVC 配置文件 <code>spring-servlet.xml</code> 添加 <code>&lt;mvc:interceptors</code> 拦截器</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;mvc:interceptors&gt;</span><br><span class="line">    &lt;mvc:interceptor&gt;</span><br><span class="line">        &lt;mvc:mapping path=<span class="string">"/**"</span> /&gt;</span><br><span class="line">        &lt;bean class="com.ycx.exam.web.comm.interceptor.TokenCheckDuplicateSubmitInterceptor"&gt;&lt;/bean&gt;</span><br><span class="line">    &lt;/mvc:interceptor&gt;</span><br><span class="line">&lt;/mvc:interceptors&gt;</span><br></pre></td></tr></table></figure><p>TokenCheckDuplicateSubmitInterceptor.java</p><p>在拦截器中判断<code>TokenCheck</code>注解<code>isCheckToken</code>是否为 true，如果为 true，则执行缓存校验；</p><p>先从 redis 缓存中获取到 token 集合，再从缓存中查询 token；</p><p>如果存在，则属于重复提交，返回；</p><p>如果不存在，则属于首次提交，将此token压入token集合中并将token集合放回redis中；</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TokenCheckDuplicateSubmitInterceptor</span> <span class="keyword">extends</span> <span class="title">HandlerInterceptorAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger log = Logger.getLogger(TokenCheckDuplicateSubmitInterceptor.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> </span>&#123;</span><br><span class="line">        WebApplicationContext context = WebApplicationContextUtils.getRequiredWebApplicationContext(request.getServletContext());</span><br><span class="line">        CacheService cacheService = (CacheService) context.getBean(<span class="string">"cacheService"</span>);</span><br><span class="line">        <span class="keyword">if</span> (cacheService == <span class="keyword">null</span>) &#123;</span><br><span class="line">            log.warn(<span class="string">"token拦截器校验重复提交，缓存service为空!"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (handler <span class="keyword">instanceof</span> HandlerMethod) &#123;</span><br><span class="line">            HandlerMethod handlerMethod = (HandlerMethod) handler;</span><br><span class="line">            Method method = handlerMethod.getMethod();</span><br><span class="line">            TokenCheck annotation = method.getAnnotation(TokenCheck.class);</span><br><span class="line">            <span class="keyword">if</span> (annotation != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">boolean</span> isCheckToken = annotation.isCheckToken();</span><br><span class="line">                <span class="keyword">if</span> (isCheckToken) &#123;</span><br><span class="line">                    <span class="keyword">boolean</span> isExist = <span class="keyword">true</span>;</span><br><span class="line">                    <span class="keyword">boolean</span> isgetLock = getLock(cacheService, <span class="string">"examTokenLock"</span>, <span class="number">1</span>);</span><br><span class="line">                    <span class="keyword">if</span> (isgetLock) &#123;</span><br><span class="line">                        isExist = checkTokenExist(request, cacheService);</span><br><span class="line">                        <span class="keyword">if</span> (!isExist) &#123;</span><br><span class="line">                            log.warn(<span class="string">"token拦截重复提交校验"</span> + method.getName() + <span class="string">"重复提交!"</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    cacheService.releaseLock(<span class="string">"examTokenLock"</span>);</span><br><span class="line">                    <span class="keyword">return</span> isExist;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">super</span>.preHandle(request, response, handler);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cacheService</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cacheKey</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> second    秒</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">getLock</span><span class="params">(CacheService cacheService, String cacheKey, <span class="keyword">long</span> second)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> isgetLock = cacheService.getLock(cacheKey, <span class="string">"1"</span>, second);</span><br><span class="line">        <span class="comment">//如果没有获得锁，将默认进行三次锁的获取</span></span><br><span class="line">        <span class="keyword">if</span> (!isgetLock) &#123;</span><br><span class="line">            log.info(<span class="string">"获得分布式锁失败，进入等待..........."</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">2</span>; i++) &#123;</span><br><span class="line">                isgetLock = cacheService.getLock(cacheKey, <span class="string">"1"</span>, second);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (!isgetLock) &#123;</span><br><span class="line">                        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (isgetLock) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> isgetLock;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 缓存校验</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cacheService</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">checkTokenExist</span><span class="params">(HttpServletRequest request, CacheService cacheService)</span> </span>&#123;</span><br><span class="line">        String token = request.getParameter(<span class="string">"examToken"</span>);</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isEmpty(token)) &#123;</span><br><span class="line">            log.warn(<span class="string">"token拦截器校验重复提交，页面提交过来token为空!"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        token = token.trim();</span><br><span class="line">        LRULinkedHashMap&lt;String, String&gt; cmap = (LRULinkedHashMap&lt;String, String&gt;) cacheService.getCacheData(<span class="string">"examTokenMap"</span>);</span><br><span class="line">        <span class="keyword">if</span> (cmap == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> size = <span class="number">131072</span>;</span><br><span class="line">            <span class="comment">// 最近最少使用算法，linkedHashMap实现，主要是针对缓存过期策略实现</span></span><br><span class="line">            cmap = <span class="keyword">new</span> LRULinkedHashMap&lt;String, String&gt;(size);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            log.info(<span class="string">"token缓存map存在，size="</span> + cmap.size());</span><br><span class="line">        &#125;</span><br><span class="line">        String ieExist = cmap.get(token);</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isEmpty(ieExist)) &#123;</span><br><span class="line">            log.info(<span class="string">"缓存不存在token="</span> + token);</span><br><span class="line">            String valu = cmap.put(token, <span class="string">"1"</span>);</span><br><span class="line">            cacheService.setCacheDataForType(<span class="string">"examTokenMap"</span>, cmap, <span class="number">1</span>, TimeUnit.HOURS);</span><br><span class="line">            log.info(<span class="string">"将token="</span> + token + <span class="string">"加入缓存成功!"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            log.info(<span class="string">"将token="</span> + token + <span class="string">"已经存在，重复提交!"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;加载页面时候调用-initToken-方法，生成-token-存入页面隐藏域中&quot;&gt;&lt;a href=&quot;#加载页面时候调用-initToken-方法，生成-token-存入页面隐藏域中&quot; class=&quot;headerlink&quot; title=&quot;加载页面时候调用 initT
      
    
    </summary>
    
      <category term="技术开发" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/"/>
    
      <category term="解决方案" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
  </entry>
  
</feed>
