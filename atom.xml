<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>yp_ren Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-08-02T04:43:52.595Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>renyapeng</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>token 防表单重复提交</title>
    <link href="http://yoursite.com/wiki/token-%E9%98%B2%E8%A1%A8%E5%8D%95%E9%87%8D%E5%A4%8D%E6%8F%90%E4%BA%A4/"/>
    <id>http://yoursite.com/wiki/token-防表单重复提交/</id>
    <published>2019-08-02T03:16:10.000Z</published>
    <updated>2019-08-02T04:43:52.595Z</updated>
    
    <content type="html"><![CDATA[<p>1、加载页面时候调用 <code>initToken()</code> 方法，生成 token 存入页面隐藏域中</p><figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">&lt;%<span class="comment">--隐藏域-防止表单的重复提交--%&gt;</span></span><br><span class="line">&lt;<span class="built_in">input</span> <span class="built_in">type</span>=<span class="string">"hidden"</span> name=<span class="string">"examToken"</span> id=<span class="string">"examToken"</span>&gt;&lt;/<span class="built_in">input</span>&gt;</span><br></pre></td></tr></table></figure><p>2、表单提交的时候带上 token</p><p>3、springMVC 方法上添加注解 <code>@TokenCheck(isCheckToken = true</code></p><p>4、自定义注解 <code>TokenCheck.java</code></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 注解会在class字节码文件中存在，在运行时可以通过反射获取到</span></span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME) </span><br><span class="line"><span class="comment">// 定义注解的作用目标**作用范围字段、枚举的常量/方法</span></span><br><span class="line"><span class="meta">@Target</span>(&#123;ElementType.METHOD&#125;)</span><br><span class="line"><span class="comment">// 说明该注解将被包含在javadoc中</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> TokenCheck &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是否需要校验</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isCheckToken</span><span class="params">()</span> <span class="keyword">default</span> <span class="keyword">false</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5、springMVC 配置文件 <code>spring-servlet.xml</code> 添加 <code>&lt;mvc:interceptors</code> 拦截器</p><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;mvc:interceptors&gt;</span><br><span class="line">    &lt;mvc:interceptor&gt;</span><br><span class="line">        &lt;mvc:mapping path=<span class="string">"/**"</span> /&gt;</span><br><span class="line">        &lt;bean class="com.ycx.exam.web.comm.interceptor.TokenCheckDuplicateSubmitInterceptor"&gt;&lt;/bean&gt;</span><br><span class="line">    &lt;/mvc:interceptor&gt;</span><br><span class="line">&lt;/mvc:interceptors&gt;</span><br></pre></td></tr></table></figure><p>TokenCheckDuplicateSubmitInterceptor.java</p><p>在拦截器中判断<code>TokenCheck</code>注解<code>isCheckToken</code>是否为 true，如果为 true，则执行缓存校验；</p><p>先从 redis 缓存中获取到 token 集合，再从缓存中查询 token；</p><p>如果存在，则属于重复提交，返回；</p><p>如果不存在，则属于首次提交，将此token压入token集合中并将token集合放回redis中；</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TokenCheckDuplicateSubmitInterceptor</span> <span class="keyword">extends</span> <span class="title">HandlerInterceptorAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger log = Logger.getLogger(TokenCheckDuplicateSubmitInterceptor.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> </span>&#123;</span><br><span class="line">        WebApplicationContext context = WebApplicationContextUtils.getRequiredWebApplicationContext(request.getServletContext());</span><br><span class="line">        CacheService cacheService = (CacheService) context.getBean(<span class="string">"cacheService"</span>);</span><br><span class="line">        <span class="keyword">if</span> (cacheService == <span class="keyword">null</span>) &#123;</span><br><span class="line">            log.warn(<span class="string">"token拦截器校验重复提交，缓存service为空!"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (handler <span class="keyword">instanceof</span> HandlerMethod) &#123;</span><br><span class="line">            HandlerMethod handlerMethod = (HandlerMethod) handler;</span><br><span class="line">            Method method = handlerMethod.getMethod();</span><br><span class="line">            TokenCheck annotation = method.getAnnotation(TokenCheck.class);</span><br><span class="line">            <span class="keyword">if</span> (annotation != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">boolean</span> isCheckToken = annotation.isCheckToken();</span><br><span class="line">                <span class="keyword">if</span> (isCheckToken) &#123;</span><br><span class="line">                    <span class="keyword">boolean</span> isExist = <span class="keyword">true</span>;</span><br><span class="line">                    <span class="keyword">boolean</span> isgetLock = getLock(cacheService, <span class="string">"examTokenLock"</span>, <span class="number">1</span>);</span><br><span class="line">                    <span class="keyword">if</span> (isgetLock) &#123;</span><br><span class="line">                        isExist = checkTokenExist(request, cacheService);</span><br><span class="line">                        <span class="keyword">if</span> (!isExist) &#123;</span><br><span class="line">                            log.warn(<span class="string">"token拦截重复提交校验"</span> + method.getName() + <span class="string">"重复提交!"</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    cacheService.releaseLock(<span class="string">"examTokenLock"</span>);</span><br><span class="line">                    <span class="keyword">return</span> isExist;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">super</span>.preHandle(request, response, handler);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cacheService</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cacheKey</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> second    秒</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">getLock</span><span class="params">(CacheService cacheService, String cacheKey, <span class="keyword">long</span> second)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> isgetLock = cacheService.getLock(cacheKey, <span class="string">"1"</span>, second);</span><br><span class="line">        <span class="comment">//如果没有获得锁，将默认进行三次锁的获取</span></span><br><span class="line">        <span class="keyword">if</span> (!isgetLock) &#123;</span><br><span class="line">            log.info(<span class="string">"获得分布式锁失败，进入等待..........."</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">2</span>; i++) &#123;</span><br><span class="line">                isgetLock = cacheService.getLock(cacheKey, <span class="string">"1"</span>, second);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (!isgetLock) &#123;</span><br><span class="line">                        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (isgetLock) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> isgetLock;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 缓存校验</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cacheService</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">checkTokenExist</span><span class="params">(HttpServletRequest request, CacheService cacheService)</span> </span>&#123;</span><br><span class="line">        String token = request.getParameter(<span class="string">"examToken"</span>);</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isEmpty(token)) &#123;</span><br><span class="line">            log.warn(<span class="string">"token拦截器校验重复提交，页面提交过来token为空!"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        token = token.trim();</span><br><span class="line">        LRULinkedHashMap&lt;String, String&gt; cmap = (LRULinkedHashMap&lt;String, String&gt;) cacheService.getCacheData(<span class="string">"examTokenMap"</span>);</span><br><span class="line">        <span class="keyword">if</span> (cmap == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> size = <span class="number">131072</span>;</span><br><span class="line">            <span class="comment">// 最近最少使用算法，linkedHashMap实现，主要是针对缓存过期策略实现</span></span><br><span class="line">            cmap = <span class="keyword">new</span> LRULinkedHashMap&lt;String, String&gt;(size);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            log.info(<span class="string">"token缓存map存在，size="</span> + cmap.size());</span><br><span class="line">        &#125;</span><br><span class="line">        String ieExist = cmap.get(token);</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isEmpty(ieExist)) &#123;</span><br><span class="line">            log.info(<span class="string">"缓存不存在token="</span> + token);</span><br><span class="line">            String valu = cmap.put(token, <span class="string">"1"</span>);</span><br><span class="line">            cacheService.setCacheDataForType(<span class="string">"examTokenMap"</span>, cmap, <span class="number">1</span>, TimeUnit.HOURS);</span><br><span class="line">            log.info(<span class="string">"将token="</span> + token + <span class="string">"加入缓存成功!"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            log.info(<span class="string">"将token="</span> + token + <span class="string">"已经存在，重复提交!"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;1、加载页面时候调用 &lt;code&gt;initToken()&lt;/code&gt; 方法，生成 token 存入页面隐藏域中&lt;/p&gt;
&lt;figure class=&quot;highlight lua&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;
      
    
    </summary>
    
      <category term="知识点" scheme="http://yoursite.com/categories/%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    
      <category term="解决方案" scheme="http://yoursite.com/categories/%E7%9F%A5%E8%AF%86%E7%82%B9/%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/wiki/hello-world/"/>
    <id>http://yoursite.com/wiki/hello-world/</id>
    <published>2019-08-01T09:52:13.459Z</published>
    <updated>2019-08-01T09:52:13.460Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
